# 1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.

import random as rnd

size = 15
arr = [rnd.randint(-100, 99) for _ in range(size)]
rnd.shuffle(arr)
print('\nБыло:\t', *arr)

# Как проще поступить, не выходя за пределы пузырьковой сортировки?
# По данным "Хабр" худшим вариантом по сравнению с пузырьковой по числу проходов является т.н. "глупая" - отвергаем.
# Там же кроме шейкерной и "расчёской" рассматривается чётно-нечётная - отвергаем, отнеся её к категории "и другие".
# Сделать алгоритм пузырьковой сортировки с урока "умнее" можно уменьшив число вызовов len() до 0 без промежуточной
# переменной со значением длины массива (она уже есть) и заменив увеличение 'n' уменьшением.
# Иными словами, вместо [ n = 1, while n < len(array), for i in range(len(array) - n), n += 1 ] см. ниже:

def bubble_sort(array, length):
    n = length - 1
    while n > 0:
        for i in range(n):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
        n -= 1

bubble_sort(arr, size)
print('Стало:\t', *arr)
